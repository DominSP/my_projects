getwd()
Suicide_Detection <- read.csv("Suicide_Detection.csv")
pomocnicze_dane<-Suicide_Detection[1:10000,]

#the data is so big so i choose first 10000, i tried also more but then the kod is too slow

summary(pomocnicze_dane)
str(pomocnicze_dane)

str(pomocnicze_dane[,c(2,3)])
Data<-pomocnicze_dane[,c(2,3)] #delating first column
summary(Data)
str(Data)


Data$class<-factor(Data$class)
Data$class[1:10]
str(Data$class)
summary(Data$class)

library(tm)

Data_corpus<-VCorpus(VectorSource(Data$text))

print(Data_corpus)


#big letters to small one
Data_corpus_clean<-tm_map(Data_corpus,content_transformer(tolower))
as.character(Data_corpus_clean[[8]])

#delating words as 'or' 'and'
stopwords()
Data_corpus_clean<-tm_map(Data_corpus_clean,removeWords,stopwords())
as.character(Data_corpus_clean[[3467]])

#here i wanted to change words to thier basics for example learning, learned to learn
#but it makes some errors like deliting last letter from word
#Data_corpus_clean<-tm_map(Data_corpus_clean,stemDocument)


#delating punctuation marks
Data_corpus_clean<-tm_map(Data_corpus_clean,removePunctuation)
as.character(Data_corpus_clean[[76543]])

#delating numbers
Data_corpus_clean<-tm_map(Data_corpus_clean,removeNumbers)
as.character(Data_corpus_clean[[8654]])

#delating spaces that we dont need
Data_corpus_clean<-tm_map(Data_corpus_clean, stripWhitespace)
as.character(Data_corpus_clean[[263]])


macierz_dtm<-DocumentTermMatrix(Data_corpus_clean)
macierz_dtm

#create a test and learning set
dl<-length(Data[,1])
dl
tr<-0.75*dl
tr
te<-0.25*dl
te
trte<-tr+1
trte
zbioruczacy_train<-macierz_dtm[1:tr,]
zbiortestowy_test<-macierz_dtm[trte:dl,]


dane_train_labels<-Data[1:tr,]$class
dane_test_lables<-Data[trte:dl,]$class


prop.table(table(dane_train_labels))
prop.table(table(dane_test_lables))


suicide<-subset(Data, class=="suicide")
non_suicide<-subset(Data, class=="non-suicide")

library(wordcloud)

wordcloud(suicide$text, max.words=40, scale=c(1,0.7))
wordcloud(non_suicide$text, max.words=40, scale=c(1,0.5))


#saving words that happen more than 5times in text
dane_freq_words<-findFreqTerms(zbioruczacy_train,5)
str(dane_freq_words)
dane_freq_words


dane_dtm_freq_train<-zbioruczacy_train[,dane_freq_words]
dane_dtm_freq_test<-zbiortestowy_test[,dane_freq_words]

function that gives us yes if the word is in the text, no if it isnt
convert_counts<-function(x) {
  x<-ifelse(x>0,"Yes","No")
  return(x)
}

#using the function for columns
nowe_dane_train<-apply(dane_dtm_freq_train, MARGIN = 2, convert_counts)
nowe_dane_test<-apply(dane_dtm_freq_test, MARGIN = 2, convert_counts)


#creating model for prediction
library(e1071)
dane_classifier<-naiveBayes(nowe_dane_train,dane_train_labels)

dane_test_pred<-predict(dane_classifier, nowe_dane_test)

library(gmodels)
CrossTable(dane_test_pred, dane_test_lables,
           prop.chisq=FALSE, prop.c=FALSE, prop.r=FALSE,
           dnn=c('predicted','actual'))

